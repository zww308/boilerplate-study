import "util.scrypt";
import "serializer.scrypt";

// state as a struct
struct State {
    int counter;
    bytes buf;
    bool flag;
}

/*
 * test structual state serializing/deserializing
 */
contract StateStruct {
    static function deserialize(bytes buf) : State {
        Reader r = new Reader(buf);
        auto counter = r.readInt();
        auto b = r.readBytes();
        auto flag = r.readBool();

        return { counter, b, flag };
    }

    static function serialize(State s) : bytes {
        bytes sBuf = Writer.writeInt(s.counter) + Writer.writeBytes(s.buf) + Writer.writeBool(s.flag);
        return Writer.serializeState(sBuf);
    }

    public function mutate(SigHashPreimage txPreimage, int amount) {
        require(Tx.checkPreimage(txPreimage));
        bytes scriptCode = Util.scriptCode(txPreimage);

        // read/deserialize state
        int stateStart = Reader.getStateStart(scriptCode);
        State states = StateStruct.deserialize(scriptCode[stateStart :]);
        require(states == { 11, b'1234', true });

        // mutate state
        states.counter++;
        states.buf += b'ffff';
        states.flag = !states.flag;

        // write/serialize state
        bytes stateBuf = StateStruct.serialize(states);

        bytes scriptCode_ = scriptCode[: stateStart] + stateBuf;
        bytes output = Util.buildOutput(scriptCode_, amount);
        require(hash256(output) == Util.hashOutputs(txPreimage));
    }
}
