struct Fraction {
  int n; // numerator
  int d; // denominator
}

// A fraction-based math library for high precision calculation.
library FRMath {
  
  static function add(Fraction x, Fraction y) : Fraction {
    return {
      x.n * y.d + y.n * x.d,
      x.d * y.d
    };
  }

  // safe add, requires both argument denominators > 0
  static function sAdd(Fraction x, Fraction y) : Fraction {
    require(x.d > 0 && y.d > 0);
    return {
      x.n * y.d + y.n * x.d,
      x.d * y.d
    };
  }

  static function sub(Fraction x, Fraction y) : Fraction {
    return {
      x.n * y.d - y.n * x.d,
      x.d * y.d
    };
  }

  // safe sub, requires both argument denominators > 0
  static function sSub(Fraction x, Fraction y) : Fraction {
    require(x.d > 0 && y.d > 0);
    return {
      x.n * y.d - y.n * x.d,
      x.d * y.d
    };
  }

  static function mul(Fraction x, Fraction y) : Fraction {
    return {
      x.n * y.n,
      x.d * y.d
    };
  }

  // safe mul, requires both argument denominators > 0
  static function sMul(Fraction x, Fraction y) : Fraction {
    require(x.d > 0 && y.d > 0);
    return {
      x.n * y.n,
      x.d * y.d
    };
  }

  static function div(Fraction x, Fraction y) : Fraction {
    return {
      x.n * y.d,
      x.d * y.n
    };
  }

  // safe div, requires both argument denominators > 0 and y != 0
  static function sDiv(Fraction x, Fraction y) : Fraction {
    require(x.d > 0 && y.d > 0 && y.n != 0);
    return {
      x.n * y.d,
      x.d * y.n
    };
  }

  static function abs(Fraction x) : Fraction {
    return {
      abs(x.n),
      abs(x.d)
    };
  }

  // safe abs, requires both argument denominators > 0
  static function sAbs(Fraction x) : Fraction {
    require(x.d > 0);
    return {
      abs(x.n),
      x.d
    };
  }

  static function equal(Fraction x, Fraction y) : bool {
    return sub(x, y).n == 0;
  }

  static function sEqual(Fraction x, Fraction y) : bool {
    return sSub(x, y).n == 0;
  }

  static function toInt(Fraction x) : int {
    return x.n / x.d;
  }

  static function fromInt(int numerator, int denominator) : Fraction {
    return {numerator, denominator};
  }

  static function scaleUp(Fraction x, int s) : int {
    return x.n * s / x.d;
  }
}
