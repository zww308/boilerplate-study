import "util.scrypt";

// Rabin public key
type RabinPubKey = int;

// Rabin signature is combination (S, U).
struct RabinSig {
    // S
    int s;
    // U
    bytes padding;
}

library RabinSignature {
    static function checkSig(bytes msg, RabinSig sig, RabinPubKey pubKey) : bool {
        int h = Util.fromLEUnsigned(hash(msg + sig.padding));
        return (sig.s * sig.s) % pubKey == h % pubKey;
    }

    static function hash(bytes x) : bytes {
        // expand into 512 bit hash
        bytes hx = sha256(x);
        int idx = len(hx) / 2;
        return sha256(hx[: idx]) + sha256(hx[idx :]);
    }
}